//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: AuthenticationService.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `AuthenticationServiceClient`, then call methods of this protocol to make API calls.
public protocol AuthenticationServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: AuthenticationServiceClientInterceptorFactoryProtocol? { get }

  func sendAuthenticationCode(
    _ request: SwiftProtobuf.Google_Protobuf_StringValue,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_StringValue, Google_Protobuf_Empty>

  func authenticate(
    _ request: AuthenticationRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<AuthenticationRequest, SwiftProtobuf.Google_Protobuf_StringValue>
}

extension AuthenticationServiceClientProtocol {
  public var serviceName: String {
    return "AuthenticationService"
  }

  /// Unary call to sendAuthenticationCode
  ///
  /// - Parameters:
  ///   - request: Request to send to sendAuthenticationCode.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sendAuthenticationCode(
    _ request: SwiftProtobuf.Google_Protobuf_StringValue,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_StringValue, Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: AuthenticationServiceClientMetadata.Methods.sendAuthenticationCode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesendAuthenticationCodeInterceptors() ?? []
    )
  }

  /// Unary call to authenticate
  ///
  /// - Parameters:
  ///   - request: Request to send to authenticate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func authenticate(
    _ request: AuthenticationRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<AuthenticationRequest, SwiftProtobuf.Google_Protobuf_StringValue> {
    return self.makeUnaryCall(
      path: AuthenticationServiceClientMetadata.Methods.authenticate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeauthenticateInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension AuthenticationServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "AuthenticationServiceNIOClient")
public final class AuthenticationServiceClient: AuthenticationServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: AuthenticationServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: AuthenticationServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the AuthenticationService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: AuthenticationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct AuthenticationServiceNIOClient: AuthenticationServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: AuthenticationServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the AuthenticationService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: AuthenticationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol AuthenticationServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: AuthenticationServiceClientInterceptorFactoryProtocol? { get }

  func makeSendAuthenticationCodeCall(
    _ request: SwiftProtobuf.Google_Protobuf_StringValue,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_StringValue, Google_Protobuf_Empty>

  func makeAuthenticateCall(
    _ request: AuthenticationRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<AuthenticationRequest, SwiftProtobuf.Google_Protobuf_StringValue>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension AuthenticationServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return AuthenticationServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: AuthenticationServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeSendAuthenticationCodeCall(
    _ request: SwiftProtobuf.Google_Protobuf_StringValue,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_StringValue, Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: AuthenticationServiceClientMetadata.Methods.sendAuthenticationCode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesendAuthenticationCodeInterceptors() ?? []
    )
  }

  public func makeAuthenticateCall(
    _ request: AuthenticationRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<AuthenticationRequest, SwiftProtobuf.Google_Protobuf_StringValue> {
    return self.makeAsyncUnaryCall(
      path: AuthenticationServiceClientMetadata.Methods.authenticate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeauthenticateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension AuthenticationServiceAsyncClientProtocol {
  public func sendAuthenticationCode(
    _ request: SwiftProtobuf.Google_Protobuf_StringValue,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: AuthenticationServiceClientMetadata.Methods.sendAuthenticationCode.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesendAuthenticationCodeInterceptors() ?? []
    )
  }

  public func authenticate(
    _ request: AuthenticationRequest,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_StringValue {
    return try await self.performAsyncUnaryCall(
      path: AuthenticationServiceClientMetadata.Methods.authenticate.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeauthenticateInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct AuthenticationServiceAsyncClient: AuthenticationServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: AuthenticationServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: AuthenticationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol AuthenticationServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'sendAuthenticationCode'.
  func makesendAuthenticationCodeInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_StringValue, Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'authenticate'.
  func makeauthenticateInterceptors() -> [ClientInterceptor<AuthenticationRequest, SwiftProtobuf.Google_Protobuf_StringValue>]
}

public enum AuthenticationServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AuthenticationService",
    fullName: "AuthenticationService",
    methods: [
      AuthenticationServiceClientMetadata.Methods.sendAuthenticationCode,
      AuthenticationServiceClientMetadata.Methods.authenticate,
    ]
  )

  public enum Methods {
    public static let sendAuthenticationCode = GRPCMethodDescriptor(
      name: "sendAuthenticationCode",
      path: "/AuthenticationService/sendAuthenticationCode",
      type: GRPCCallType.unary
    )

    public static let authenticate = GRPCMethodDescriptor(
      name: "authenticate",
      path: "/AuthenticationService/authenticate",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension AuthenticationServiceTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class AuthenticationServiceTestClient: AuthenticationServiceClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: AuthenticationServiceClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: AuthenticationServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a unary response for the sendAuthenticationCode RPC. This must be called
  /// before calling 'sendAuthenticationCode'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makesendAuthenticationCodeResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<SwiftProtobuf.Google_Protobuf_StringValue>) -> () = { _ in }
  ) -> FakeUnaryResponse<SwiftProtobuf.Google_Protobuf_StringValue, Google_Protobuf_Empty> {
    return self.fakeChannel.makeFakeUnaryResponse(path: AuthenticationServiceClientMetadata.Methods.sendAuthenticationCode.path, requestHandler: requestHandler)
  }

  public func enqueuesendAuthenticationCodeResponse(
    _ response: Google_Protobuf_Empty,
    _ requestHandler: @escaping (FakeRequestPart<SwiftProtobuf.Google_Protobuf_StringValue>) -> () = { _ in }
  ) {
    let stream = self.makesendAuthenticationCodeResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'sendAuthenticationCode'
  public var hassendAuthenticationCodeResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: AuthenticationServiceClientMetadata.Methods.sendAuthenticationCode.path)
  }

  /// Make a unary response for the authenticate RPC. This must be called
  /// before calling 'authenticate'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeauthenticateResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<AuthenticationRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<AuthenticationRequest, SwiftProtobuf.Google_Protobuf_StringValue> {
    return self.fakeChannel.makeFakeUnaryResponse(path: AuthenticationServiceClientMetadata.Methods.authenticate.path, requestHandler: requestHandler)
  }

  public func enqueueauthenticateResponse(
    _ response: SwiftProtobuf.Google_Protobuf_StringValue,
    _ requestHandler: @escaping (FakeRequestPart<AuthenticationRequest>) -> () = { _ in }
  ) {
    let stream = self.makeauthenticateResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'authenticate'
  public var hasauthenticateResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: AuthenticationServiceClientMetadata.Methods.authenticate.path)
  }
}

