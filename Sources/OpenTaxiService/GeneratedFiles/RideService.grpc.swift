//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: RideService.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf

/// Usage: instantiate `RideServiceClient`, then call methods of this protocol to make API calls.
public protocol RideServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: RideServiceClientInterceptorFactoryProtocol? { get }

  func placeOrder(
    _ request: RideRequest,
    callOptions: CallOptions?,
    handler: @escaping (RideResponse) -> Void
  ) -> ServerStreamingCall<RideRequest, RideResponse>

  func sendChatMessage(
    _ request: SwiftProtobuf.Google_Protobuf_StringValue,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_StringValue, Google_Protobuf_Empty>

  func cancelRide(
    _ request: CancelRideRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CancelRideRequest, Google_Protobuf_Empty>
}

extension RideServiceClientProtocol {
  public var serviceName: String {
    return "RideService"
  }

  /// Server streaming call to placeOrder
  ///
  /// - Parameters:
  ///   - request: Request to send to placeOrder.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func placeOrder(
    _ request: RideRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (RideResponse) -> Void
  ) -> ServerStreamingCall<RideRequest, RideResponse> {
    return self.makeServerStreamingCall(
      path: RideServiceClientMetadata.Methods.placeOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeplaceOrderInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to sendChatMessage
  ///
  /// - Parameters:
  ///   - request: Request to send to sendChatMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sendChatMessage(
    _ request: SwiftProtobuf.Google_Protobuf_StringValue,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_StringValue, Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: RideServiceClientMetadata.Methods.sendChatMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesendChatMessageInterceptors() ?? []
    )
  }

  /// Unary call to cancelRide
  ///
  /// - Parameters:
  ///   - request: Request to send to cancelRide.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func cancelRide(
    _ request: CancelRideRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CancelRideRequest, Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: RideServiceClientMetadata.Methods.cancelRide.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecancelRideInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension RideServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "RideServiceNIOClient")
public final class RideServiceClient: RideServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: RideServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: RideServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the RideService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: RideServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct RideServiceNIOClient: RideServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: RideServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the RideService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: RideServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol RideServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: RideServiceClientInterceptorFactoryProtocol? { get }

  func makePlaceOrderCall(
    _ request: RideRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<RideRequest, RideResponse>

  func makeSendChatMessageCall(
    _ request: SwiftProtobuf.Google_Protobuf_StringValue,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_StringValue, Google_Protobuf_Empty>

  func makeCancelRideCall(
    _ request: CancelRideRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CancelRideRequest, Google_Protobuf_Empty>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension RideServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return RideServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: RideServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makePlaceOrderCall(
    _ request: RideRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<RideRequest, RideResponse> {
    return self.makeAsyncServerStreamingCall(
      path: RideServiceClientMetadata.Methods.placeOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeplaceOrderInterceptors() ?? []
    )
  }

  public func makeSendChatMessageCall(
    _ request: SwiftProtobuf.Google_Protobuf_StringValue,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_StringValue, Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: RideServiceClientMetadata.Methods.sendChatMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesendChatMessageInterceptors() ?? []
    )
  }

  public func makeCancelRideCall(
    _ request: CancelRideRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CancelRideRequest, Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: RideServiceClientMetadata.Methods.cancelRide.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecancelRideInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension RideServiceAsyncClientProtocol {
  public func placeOrder(
    _ request: RideRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<RideResponse> {
    return self.performAsyncServerStreamingCall(
      path: RideServiceClientMetadata.Methods.placeOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeplaceOrderInterceptors() ?? []
    )
  }

  public func sendChatMessage(
    _ request: SwiftProtobuf.Google_Protobuf_StringValue,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: RideServiceClientMetadata.Methods.sendChatMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makesendChatMessageInterceptors() ?? []
    )
  }

  public func cancelRide(
    _ request: CancelRideRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: RideServiceClientMetadata.Methods.cancelRide.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makecancelRideInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct RideServiceAsyncClient: RideServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: RideServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: RideServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

public protocol RideServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'placeOrder'.
  func makeplaceOrderInterceptors() -> [ClientInterceptor<RideRequest, RideResponse>]

  /// - Returns: Interceptors to use when invoking 'sendChatMessage'.
  func makesendChatMessageInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_StringValue, Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'cancelRide'.
  func makecancelRideInterceptors() -> [ClientInterceptor<CancelRideRequest, Google_Protobuf_Empty>]
}

public enum RideServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "RideService",
    fullName: "RideService",
    methods: [
      RideServiceClientMetadata.Methods.placeOrder,
      RideServiceClientMetadata.Methods.sendChatMessage,
      RideServiceClientMetadata.Methods.cancelRide,
    ]
  )

  public enum Methods {
    public static let placeOrder = GRPCMethodDescriptor(
      name: "placeOrder",
      path: "/RideService/placeOrder",
      type: GRPCCallType.serverStreaming
    )

    public static let sendChatMessage = GRPCMethodDescriptor(
      name: "sendChatMessage",
      path: "/RideService/sendChatMessage",
      type: GRPCCallType.unary
    )

    public static let cancelRide = GRPCMethodDescriptor(
      name: "cancelRide",
      path: "/RideService/cancelRide",
      type: GRPCCallType.unary
    )
  }
}

#if compiler(>=5.6)
@available(swift, deprecated: 5.6)
extension RideServiceTestClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(swift, deprecated: 5.6, message: "Test clients are not Sendable but the 'GRPCClient' API requires clients to be Sendable. Using a localhost client and server is the recommended alternative.")
public final class RideServiceTestClient: RideServiceClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: RideServiceClientInterceptorFactoryProtocol?

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions(),
    interceptors: RideServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
    self.interceptors = interceptors
  }

  /// Make a streaming response for the placeOrder RPC. This must be called
  /// before calling 'placeOrder'. See also 'FakeStreamingResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeplaceOrderResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<RideRequest>) -> () = { _ in }
  ) -> FakeStreamingResponse<RideRequest, RideResponse> {
    return self.fakeChannel.makeFakeStreamingResponse(path: RideServiceClientMetadata.Methods.placeOrder.path, requestHandler: requestHandler)
  }

  public func enqueueplaceOrderResponses(
    _ responses: [RideResponse],
    _ requestHandler: @escaping (FakeRequestPart<RideRequest>) -> () = { _ in }
  ) {
    let stream = self.makeplaceOrderResponseStream(requestHandler)
    // These are the only operation on the stream; try! is fine.
    responses.forEach { try! stream.sendMessage($0) }
    try! stream.sendEnd()
  }

  /// Returns true if there are response streams enqueued for 'placeOrder'
  public var hasplaceOrderResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: RideServiceClientMetadata.Methods.placeOrder.path)
  }

  /// Make a unary response for the sendChatMessage RPC. This must be called
  /// before calling 'sendChatMessage'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makesendChatMessageResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<SwiftProtobuf.Google_Protobuf_StringValue>) -> () = { _ in }
  ) -> FakeUnaryResponse<SwiftProtobuf.Google_Protobuf_StringValue, Google_Protobuf_Empty> {
    return self.fakeChannel.makeFakeUnaryResponse(path: RideServiceClientMetadata.Methods.sendChatMessage.path, requestHandler: requestHandler)
  }

  public func enqueuesendChatMessageResponse(
    _ response: Google_Protobuf_Empty,
    _ requestHandler: @escaping (FakeRequestPart<SwiftProtobuf.Google_Protobuf_StringValue>) -> () = { _ in }
  ) {
    let stream = self.makesendChatMessageResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'sendChatMessage'
  public var hassendChatMessageResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: RideServiceClientMetadata.Methods.sendChatMessage.path)
  }

  /// Make a unary response for the cancelRide RPC. This must be called
  /// before calling 'cancelRide'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makecancelRideResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<CancelRideRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<CancelRideRequest, Google_Protobuf_Empty> {
    return self.fakeChannel.makeFakeUnaryResponse(path: RideServiceClientMetadata.Methods.cancelRide.path, requestHandler: requestHandler)
  }

  public func enqueuecancelRideResponse(
    _ response: Google_Protobuf_Empty,
    _ requestHandler: @escaping (FakeRequestPart<CancelRideRequest>) -> () = { _ in }
  ) {
    let stream = self.makecancelRideResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'cancelRide'
  public var hascancelRideResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: RideServiceClientMetadata.Methods.cancelRide.path)
  }
}

