// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: RideModels.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
@_exported import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct RideRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var locations: [Location] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct RideResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Int32 = 0

  public var rideStatus: RideResponse.RideStatus = .searchingTaxi

  public var car: RideResponse.Car {
    get {return _car ?? RideResponse.Car()}
    set {_car = newValue}
  }
  /// Returns true if `car` has been explicitly set.
  public var hasCar: Bool {return self._car != nil}
  /// Clears the value of `car`. Subsequent reads from it will return its default value.
  public mutating func clearCar() {self._car = nil}

  public var driver: RideResponse.Driver {
    get {return _driver ?? RideResponse.Driver()}
    set {_driver = newValue}
  }
  /// Returns true if `driver` has been explicitly set.
  public var hasDriver: Bool {return self._driver != nil}
  /// Clears the value of `driver`. Subsequent reads from it will return its default value.
  public mutating func clearDriver() {self._driver = nil}

  public var estimatedPrice: String {
    get {return _estimatedPrice ?? String()}
    set {_estimatedPrice = newValue}
  }
  /// Returns true if `estimatedPrice` has been explicitly set.
  public var hasEstimatedPrice: Bool {return self._estimatedPrice != nil}
  /// Clears the value of `estimatedPrice`. Subsequent reads from it will return its default value.
  public mutating func clearEstimatedPrice() {self._estimatedPrice = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum RideStatus: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case searchingTaxi // = 0
    case drivingToClient // = 1
    case arrivedToClientAddress // = 2
    case waitingForClient // = 3
    case drivingToDestination // = 4
    case arrivedAtDestination // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .searchingTaxi
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .searchingTaxi
      case 1: self = .drivingToClient
      case 2: self = .arrivedToClientAddress
      case 3: self = .waitingForClient
      case 4: self = .drivingToDestination
      case 5: self = .arrivedAtDestination
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .searchingTaxi: return 0
      case .drivingToClient: return 1
      case .arrivedToClientAddress: return 2
      case .waitingForClient: return 3
      case .drivingToDestination: return 4
      case .arrivedAtDestination: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct Car {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var id: Int32 = 0

    public var plateNumber: Int32 = 0

    public var color: String = String()

    public var model: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Driver {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var id: Int32 = 0

    public var name: String = String()

    public var phoneNumber: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _car: RideResponse.Car? = nil
  fileprivate var _driver: RideResponse.Driver? = nil
  fileprivate var _estimatedPrice: String? = nil
}

#if swift(>=4.2)

extension RideResponse.RideStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [RideResponse.RideStatus] = [
    .searchingTaxi,
    .drivingToClient,
    .arrivedToClientAddress,
    .waitingForClient,
    .drivingToDestination,
    .arrivedAtDestination,
  ]
}

#endif  // swift(>=4.2)

public struct CancelRideRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var reason: CancelRideRequest.CancelRideReason = .badDriver

  public var comment: String {
    get {return _comment ?? String()}
    set {_comment = newValue}
  }
  /// Returns true if `comment` has been explicitly set.
  public var hasComment: Bool {return self._comment != nil}
  /// Clears the value of `comment`. Subsequent reads from it will return its default value.
  public mutating func clearComment() {self._comment = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum CancelRideReason: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case badDriver // = 0
    case accident // = 1
    case another // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .badDriver
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .badDriver
      case 1: self = .accident
      case 2: self = .another
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .badDriver: return 0
      case .accident: return 1
      case .another: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _comment: String? = nil
}

#if swift(>=4.2)

extension CancelRideRequest.CancelRideReason: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [CancelRideRequest.CancelRideReason] = [
    .badDriver,
    .accident,
    .another,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension RideRequest: @unchecked Sendable {}
extension RideResponse: @unchecked Sendable {}
extension RideResponse.RideStatus: @unchecked Sendable {}
extension RideResponse.Car: @unchecked Sendable {}
extension RideResponse.Driver: @unchecked Sendable {}
extension CancelRideRequest: @unchecked Sendable {}
extension CancelRideRequest.CancelRideReason: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension RideRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "RideRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "locations"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.locations) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.locations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.locations, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: RideRequest, rhs: RideRequest) -> Bool {
    if lhs.locations != rhs.locations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RideResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "RideResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "rideStatus"),
    3: .same(proto: "car"),
    4: .same(proto: "driver"),
    5: .same(proto: "estimatedPrice"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.rideStatus) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._car) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._driver) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._estimatedPrice) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if self.rideStatus != .searchingTaxi {
      try visitor.visitSingularEnumField(value: self.rideStatus, fieldNumber: 2)
    }
    try { if let v = self._car {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._driver {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._estimatedPrice {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: RideResponse, rhs: RideResponse) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.rideStatus != rhs.rideStatus {return false}
    if lhs._car != rhs._car {return false}
    if lhs._driver != rhs._driver {return false}
    if lhs._estimatedPrice != rhs._estimatedPrice {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RideResponse.RideStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SEARCHING_TAXI"),
    1: .same(proto: "DRIVING_TO_CLIENT"),
    2: .same(proto: "ARRIVED_TO_CLIENT_ADDRESS"),
    3: .same(proto: "WAITING_FOR_CLIENT"),
    4: .same(proto: "DRIVING_TO_DESTINATION"),
    5: .same(proto: "ARRIVED_AT_DESTINATION"),
  ]
}

extension RideResponse.Car: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = RideResponse.protoMessageName + ".Car"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "plateNumber"),
    3: .same(proto: "color"),
    4: .same(proto: "model"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.plateNumber) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.color) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.model) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if self.plateNumber != 0 {
      try visitor.visitSingularInt32Field(value: self.plateNumber, fieldNumber: 2)
    }
    if !self.color.isEmpty {
      try visitor.visitSingularStringField(value: self.color, fieldNumber: 3)
    }
    if !self.model.isEmpty {
      try visitor.visitSingularStringField(value: self.model, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: RideResponse.Car, rhs: RideResponse.Car) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.plateNumber != rhs.plateNumber {return false}
    if lhs.color != rhs.color {return false}
    if lhs.model != rhs.model {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RideResponse.Driver: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = RideResponse.protoMessageName + ".Driver"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "phoneNumber"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.phoneNumber) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.phoneNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.phoneNumber, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: RideResponse.Driver, rhs: RideResponse.Driver) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.phoneNumber != rhs.phoneNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CancelRideRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "CancelRideRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reason"),
    2: .same(proto: "comment"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.reason) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._comment) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.reason != .badDriver {
      try visitor.visitSingularEnumField(value: self.reason, fieldNumber: 1)
    }
    try { if let v = self._comment {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: CancelRideRequest, rhs: CancelRideRequest) -> Bool {
    if lhs.reason != rhs.reason {return false}
    if lhs._comment != rhs._comment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension CancelRideRequest.CancelRideReason: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BAD_DRIVER"),
    1: .same(proto: "ACCIDENT"),
    2: .same(proto: "ANOTHER"),
  ]
}
